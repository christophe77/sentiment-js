import*as t from"@tensorflow/tfjs";import*as e from"@tensorflow-models/toxicity";function n(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{c(i.next(t))}catch(t){r(t)}}function l(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,l)}c((i=i.apply(t,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const i=2,o=(t,e,n="pre",i="pre",o=0)=>t.map((t=>{if(t.length>e&&("pre"===i?t.splice(0,t.length-e):t.splice(e,t.length-e)),t.length<e){const i=[];for(let n=0;n<e-t.length;++n)i.push(o);t="pre"===n?i.concat(t):t.concat(i)}return t})),r=t=>t.replace(/[^(a-zA-ZA-Яa-я0-9_)+\s]/g," ").split(/\s+/),s=t=>t>.65?"positive":t<.65?"negative":"neutral";function l(e){return n(this,void 0,void 0,(function*(){const n=yield t.loadLayersModel("https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json"),l=yield fetch("https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json"),c=yield l.json(),a=r(e).map((t=>{let e=c.word_index[t]+c.index_from;return e>c.vocabulary_size&&(e=i),e})),u=o([a],c.max_len),d=t.tensor2d(u,[1,c.max_len]),f=n.predict(d),p=f.dataSync()[0];f.dispose();const m=s(Number(p.toFixed(2)));return{score:p,result:m}}))}function c(t){return n(this,void 0,void 0,(function*(){const n=yield e.load(.9,[]);return(yield n.classify(t)).map((t=>{if(!0===t.results[0].match)return{label:t.label,result:t.results[0].match}})).filter(Boolean)}))}const a={analyse:function(t){return n(this,arguments,void 0,(function*({text:t,type:e}){if("sentiment"===e){return{sentiment:yield l(t)}}if("toxicity"===e){return{toxicity:yield c(t)}}if("combined"===e){const e=yield l(t),i=yield c(t),o=yield function(t,e){return n(this,void 0,void 0,(function*(){if("negative"!==t.result){let t="positive";return e.forEach((e=>{!0===e.result&&(t="negative")})),t}return"negative"}))}(e,i);return{combined:o}}return{sentiment:yield l(t),toxicity:yield c(t)}}))}};export{a as default};
//# sourceMappingURL=bundle.min.mjs.map
