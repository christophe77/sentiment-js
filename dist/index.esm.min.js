import*as tf from"@tensorflow/tfjs";import*as tfToxicity from"@tensorflow-models/toxicity";function __awaiter(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{c(i.next(t))}catch(t){r(t)}}function a(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const OOV_INDEX=2,PAD_INDEX=0,padSequences=(t,e,n="pre",i="pre",o=0)=>t.map((t=>{if(t.length>e&&("pre"===i?t.splice(0,t.length-e):t.splice(e,t.length-e)),t.length<e){const i=[];for(let n=0;n<e-t.length;++n)i.push(o);t="pre"===n?i.concat(t):t.concat(i)}return t})),tokenize=t=>t.replace(/[^(a-zA-ZA-Яa-я0-9_)+\s]/g," ").split(/\s+/),computeSentiment=t=>t>.65?"positive":t<.65?"negative":.65===t?"neutral":void 0;function getSentiment(t){return __awaiter(this,void 0,void 0,(function*(){const e=yield tf.loadLayersModel("https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json"),n=yield fetch("https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json"),i=yield n.json(),o=tokenize(t).map((t=>{let e=i.word_index[t]+i.index_from;return e>i.vocabulary_size&&(e=OOV_INDEX),e})),r=padSequences([o],i.max_len),s=tf.tensor2d(r,[1,i.max_len]),a=e.predict(s),c=a.dataSync()[0];a.dispose();const l=computeSentiment(Number(c.toFixed(2)));return{score:c,result:l}}))}function getToxicity(t){return __awaiter(this,void 0,void 0,(function*(){const e=yield tfToxicity.load(.9,[]);return(yield e.classify(t)).map((t=>{if(!0===t.results[0].match)return{label:t.label,result:t.results[0].match}})).filter(Boolean)}))}function getCombined(t,e){return __awaiter(this,void 0,void 0,(function*(){if("negative"!==t.result){let t="positive";return e.forEach((e=>{!0===e.result&&(t="negative")})),t}return"negative"}))}function analyse(t){return __awaiter(this,arguments,void 0,(function*({text:t,type:e}){if("sentiment"===e){return{sentiment:yield getSentiment(t)}}if("toxicity"===e){return{toxicity:yield getToxicity(t)}}if("combined"===e){const e=yield getSentiment(t),n=yield getToxicity(t);return{combined:yield getCombined(e,n)}}return{sentiment:yield getSentiment(t),toxicity:yield getToxicity(t)}}))}const sjs={analyse:analyse};export{sjs as default};
